:: This is hereby released under a license where you can do whatever, on the terms that you do not claim the script or parts of the script as your own and retain 'Excalibur', 'Netham45' and 'clrokr' somewhere in the final product.
:: Released XX/XX/2014, Version 2.00
:: Origionally written by Netham45
:: Thanks to clrokr for finding and documenting the exploit!

@echo	off
set	TITLE=Jailbreak 2.00 by Excalibur
title	%TITLE%
cls
::==============================================================================
:: Debugging macro
set	DEBUG=TRUE
set	IFDEF_DEBUG=if "%DEBUG%" == "TRUE"	(
set	IFNDEF_DEBUG=if not "%DEBUG%" == "TRUE"	(
set	ENDIF=)
::==============================================================================
:: Running as administrator mucks with the current dir, this restores it.
set	BATCH_PATH=%~fp0
set	BATCH_DIR=%~dp0
pushd	"%BATCH_DIR%"
set	command==-autorun

:: Check if we're flagged to run the startup commands
reg	query HKCU\software\Jailbreak 2>nul | find "runStartup" >nul 2>nul
if	%ERRORLEVEL% == 0	(
	call	:Startup
	exit
	)

:: Check if we have our binaries
if 	not exist bin\cdb.exe	(
	call	:BugCheck	"I need my bin folder! Did you fully extract the zip?"
	)
if 	not exist bin\isUnsigned.exe	(
	call	:BugCheck	"I need my bin folder! Did you fully extract the zip?"
	)

set	PATH=%PATH%;%BATCH_PATH%\bin

:: Check if we're already unsigned. If so, throw an error.
echo	Performing some checks...
if	not "%PROCESSOR_ARCHITECTURE%"=="ARM"	(
	call	:BugCheck	"This is not intended to run on %PROCESSOR_ARCHITECTURE%. Please run this on a Windows RT device."
	)
cls

:: Check for commandline options
if	"%1" == "-?"	(
	call	:Help
	exit
	)
if	"%1" == "/?"	(
	call	:Help
	exit
	)
if	"%1" == "-install"	(
	goto	Install
	)
if	"%1" == "/install"	(
	goto	Install
	)
if	"%1" == "-uninstall"	(
	goto	Uninstall
	)
if	"%1" == "/uninstall"	(
	goto	Uninstall
	)
if	"%1" == "-startup"	(
	call	:Startup
	exit
	)
if	"%1" == "/startup"	(
	call	:Startup
	exit
	)

call	:CheckJailbreak
if	"%RETURN%" == "TRUE"	(
	goto	wereUnsigned
	)
cls

if	"%1" == "-autorun"	(
	goto	Run
	)

:: No commandline options. Give a prompt.
echo	%TITLE%
echo	[J]ailbreak
echo	[I]nstall to run on boot
echo	[U]ninstall
echo	[E]xit
choice	/C JIUE
if	%ERRORLEVEL% == 2	(
	goto	Install
	)
if	%ERRORLEVEL% == 3	(
	goto	Uninstall
	)
if	%ERRORLEVEL% == 4	(
	call	:BugCheck	"Not running jailbreak."
	)

:: We need to be admin.
call	:CheckAdmin
if	"%RETURN%" == "FALSE"	(
	goto	notAdmin
	)

%IFNDEF_DEBUG%
	:: Check if we BSoD'd last time, if so ask a question.
	call	:CheckBSoD
	if	"%RETURN%"=="TRUE"	(
		choice	/m "The jailbreak crashed last time it ran. Would you like to continue?"
		if	%ERRORLEVEL% == 0	(
			exit
		)
	)

	:: Wait for the system to be up for two minutes.
	echo	Waiting for uptime to reach two minutes
	powershell	-NoProfile -Command "$Computer=(Get-WmiObject -Class Win32_OperatingSystem);$LastBoot=$Computer.ConvertToDateTime($Computer.LastBootUpTime);do{$sysuptime= (Get-Date)	-	$LastBoot}while($sysuptime.TotalSeconds -lt 120);$([char]7)"
%ENDIF%

:: Get signingleveling address
pushd	"%BATCH_DIR%\bin"
echo	Trying to get Sigining Level offset. If this part hangs please ensure that you  are connected to the internet. An internet connection is only required for the  first time the jailbreak is ran.
for	/f "delims=( tokens=2" %%p in ('cdb -z %systemroot%\system32\ntoskrnl.exe -c ".symfix;.reload;u ntoskrnl!SeGetImageRequiredSigningLevel+0x18;q" ^| findstr "ldr" ^| findstr "r3,="') do set signinglevel=%%p
for	/f "delims=) tokens=1" %%p in ("%signinglevel%") do set /a signinglevel=0x%%p + 0x16 - 0x400000
popd

call	:DecToHex %signinglevel%
:: Add spaces, reverse endianness.
echo	%RETURN%
set	signinglevel=%RETURN:~4,2% %RETURN:~2,2% %RETURN:~0,2% 00
call	:DebugPrint "signinglevel == %signinglevel%"

:: Get ciOptions address
pushd	"%BATCH_DIR%\bin"
echo	Trying to get g_CiOptions offset. If this part hangs please ensure that you are connected to the internet. An internet connection is only required for the first time the jailbreak is ran.
for	/f "tokens=5" %%p in ('cdb -z %systemroot%\system32\ci.dll -c ".symfix;.reload;? g_ciOptions;q" ^| findstr "Evaluate"') do set /A ciOptions=0x%%p-0x10000+0x18
popd

call	:DecToHex %ciOptions%
:: Add spaces, reverse endianness.
set	ciOptions=%RETURN:~2,2% %RETURN:~0,2% 00 00
call	:DebugPrint "ciOptions == %ciOptions%"

:: Get the current Session ID
for	/f "tokens=4" %%b in ('tasklist /fi "imagename eq tasklist.exe" /fi "username eq %username%" /nh') do set SESSID=%%b
:: Get the pid for the CSRSS.exe process running under the current session
for	/f "tokens=2" %%b in ('tasklist /fi "imagename eq csrss.exe" /fi "session eq %SESSID%" /nh') do set PID=%%b

:: Create a registry value so we can check if the system BSoDs during the attempt. >nul 2>nul
reg	add HKCU\software\Jailbreak\ /v cleanExit /d FALSE /f >nul 2>nul

:: Inject payload and hook
cdb	-pvr -p %PID% -c "e winsrv.dll+0x3644 0d f0 dc b8;e winsrv.dll+0x10800 2D E9 FF 1F EB 46 84 B0 4F F4 00 53 03 93 4F F0 00 03 02 93 04 23 01 93 4F F4 80 53 00 93 03 AB 00 22 02 A9 4F F6 FF 70 CF F6 FF 70 4F F0 16 0C 01 DF 00 23 4F F4 00 52 02 99 0B 20 4F F0 34 0C 01 DF 02 99 C9 68 4E F6 F0 77 C0 F2 07 07 88 46 DF F8 64 90 C8 44 0C 23 1A AA 02 F1 04 05 C5 F8 00 80 09 21 6F F0 01 00 41 F2 E1 0C 01 DF 7F 1E 00 2F F0 D1 02 99 D1 F8 24 1B 40 F2 25 07 C0 F2 00 07 88 46 DF F8 34 90 C8 44 0C 23 1A AA 02 F1 04 05 C5 F8 00 80 09 21 6F F0 01 00 41 F2 E1 0C 01 DF 7F 1E 00 2F F0 D1 DD 46 BD E8 FF 1F 07 46 00 2F FD E7 F2 F7 CB BE %signinglevel% %ciOptions%;.detach;q" 1>nul 2>nul

echo	Please press VOLUME DOWN, VOLUME UP, or MUTE now

:: This loop goes until unsigned code is running
:while_jailbreak
call	:CheckJailbreak
if	"%RETURN%" == "FALSE"	(
	goto	while_jailbreak
	)

:: Clear the hook and jump back to CSRSS's code
cdb	-pvr -p %PID% -c "e winsrv.dll+0x3644 07 46 00 2f;e winsrv.dll+0xdetach;q" 1>nul 2>nul
:: Clean up.
reg	delete HKCU\software\Jailbreak\ /v cleanExit /f >nul 2>nul

echo	Your tablet should now be jailbroken. Running Startup.
call	:Startup
exit
::==============================================================================
:notAdmin
cls
:: This requests admin privs. Powershell is slow to load, I don't know why.
echo	Please wait, requesting administrative privileges...
powershell	-NoProfile -Command "Start-Process \"%BATCH_PATH%\" \"%command%\" -Verb RunAs"
exit
::==============================================================================
:wereUnsigned
cls
echo	The jailbreak has already been ran. Please choose an option:
echo	[I]nstall to run on boot
echo	[U]ninstall
echo	[E]xit
choice	/C IUE
if	%ERRORLEVEL% == 1	(
	goto	Install
	)
if	%ERRORLEVEL% == 2	(
	goto	Uninstall
	)
exit
::==============================================================================
:Install
cls
echo	a > "%systemroot%\system32\rthack_temp"
if	exist "%systemroot%\system32\rthack_temp"	(
	del	"%systemroot%\system32\rthack_temp"
	echo	Installing Task Scheduler event to run on boot
	schtasks	/create /sc onlogon /tn Jailbreak /tr "\"%BATCH_PATH%\" -autorun" /F
	powershell	-NoProfile -Command "Set-ScheduledTask -TaskName Jailbreak -Settings (New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries)"
	pause
	exit
	)
set	command=-install
goto	notAdmin
::==============================================================================
:Uninstall
cls
echo	a > "%systemroot%\system32\rthack_temp"
if	exist "%systemroot%\system32\rthack_temp"	(
	del	"%systemroot%\system32\rthack_temp"
	echo	Removing Task Scheduler event to run on boot
	schtasks	/delete /tn Jailbreak /F
	pause
	exit
	)
set	command=-uninstall
goto	notAdmin
::==============================================================================
:Help
cls
echo	-install	Add script to Task Scheduler so it runs on boot
echo	-uninstall	Remove script from Task Scheduler so it no longer runs on boot
echo	-autorun	Run without prompting
echo	-startup	Run startup commands
echo.
echo	See Readme.txt and the thread on XDA Developers for more information
pause
goto	return
::==============================================================================
:Startup
:: We don't want to run a bunch of programs that most likely don't need admin as admin. Let's make sure we don't.
call	:CheckAdmin
if	"%RETURN%" == "FALSE"	(
	reg	delete HKCU\software\Jailbreak /v runStartup /f >nul 2>nul
	pushd	"%BATCH_DIR%\Startup"
	for	/r %%a in (*) do %%a
	popd
	for	/f "tokens=3" %%b in ('reg query HKCU\Software\Jailbreak\RunOnBoot 2^>nul') do %%b >nul 2>nul
	for	/f "tokens=3" %%b in ('reg query HKLM\Software\Jailbreak\RunOnBoot 2^>nul') do %%b >nul 2>nul
	pause
)	else	(
	reg	add HKCU\software\Jailbreak /v runStartup /f >nul 2>nul
	explorer	"%BATCH_PATH%"
)
goto	return
::==============================================================================
:: DecToHex
::	Decimal to Hex script from https://gist.github.com/ijprest/1207832
:: Agruments:
::	%*	Dec number string
:: Return value:
::	TSTR %RESULT%	Hex number
:DecToHex
setlocal	enableextensions enabledelayedexpansion
set	LOOKUP=0123456789abcdef
set	RETURN=
set	/a	A=%*
if	!A! LSS 0	(
	set	/a	A=0xfffffff + !A! + 1
)
:DecToHex_loop
set	/a	B=!A! %% 16
set	/a	A=!A! / 16
set	RETURN=!LOOKUP:~%B%,1!%RETURN%
if	%A% GTR 0	(
	goto	DecToHex_loop
)

goto return 
::==============================================================================
:: BugCheck
::	Throw out an error
:: Agruments:
::	%1	The quotated string
::	%2	The error code
:: Return value:
::	None
:BugCheck
setlocal enableextensions enabledelayedexpansion
set	BugCheck_Text=%1
if	defined BugCheck_Text	(
	call	:ConvertQSTRToSTR %BugCheck_Text%
	color	c
	echo	!RETURN!
	pause
	color
)
exit	%2
::==============================================================================
:: CheckBSoD
::	Check if we crashed the system last time
:: Return value:
::	BOOL %RETURN%	"TRUE" for Admin, "FALSE" for other
:CheckBSoD
reg	query HKCU\software\Jailbreak\ | find "cleanExit" | find "FALSE" >nul 2>nul
if	%ERRORLEVEL% == 0	(
	reg	delete HKCU\software\Jailbreak\ /v cleanExit /f >nul 2>nul
	set	RETURN=TRUE
)	else	(
	set	RETURN=FALSE
)
goto	return
::==============================================================================
:: CheckJailbreak
::	Check if we already jailbroke the system
:: Return value:
::	BOOL %RETURN%	"TRUE" for Admin, "FALSE" for other
:CheckJailbreak
isUnsigned	>nul 2>nul
if	%ERRORLEVEL% == 0	(
	set	RETURN=TRUE
)	else	(
	set	RETURN=FALSE
	)
	
goto	return
::==============================================================================
:: CheckAdmin
::	Check if we have the privilege
:: Return value:
::	BOOL %RETURN%	"TRUE" for Admin, "FALSE" for other
:CheckAdmin
:: Cheap dirty way to check if we're admin or not on a stock system
reg	add HKLM\software\Jailbreak /v amIAdmin /f >nul 2>nul
if	%ERRORLEVEL% == 0	(
	set	RETURN=TRUE
)	else	(
	set	RETURN=FALSE
)
reg	delete HKLM\software\Jailbreak /v amIAdmin /f >nul 2>nul

goto	return
::==============================================================================
:: QSTRToSTR
::	Convert the quotated string into string
:: Agruments:
::	%1	The quotated string
:: Return value:
::	TSTR %RETURN%	The output string
:ConvertQSTRToSTR
set	ConvertQSTRToSTR_Text=%1
set	"ConvertQSTRToSTR_Text=%ConvertQSTRToSTR_Text:~1%"
call	:lstrlen %ConvertQSTRToSTR_Text%
set	/a RETURN-=1
call	:lstrcpyn %ConvertQSTRToSTR_Text%

goto	return
::==============================================================================
:: lstrlen
::	Calculate the given string length
:: Agruments:
::	%*	The string
:: Return value:
::	INT %RETURN%	Count of characters
:lstrlen
set	lstrlen_Text=%*
set	RETURN=0
:lstrlen_loop
if	defined lstrlen_Text	(
	set	/a	RETURN+=1
	set	"lstrlen_Text=%lstrlen_Text:~1%"
	goto	lstrlen_loop
	)
	
goto	return
::==============================================================================
:: lstrcpyn
:: 	Copy a given number of character
:: Input
::	%*	The string
::	%RETURN%	Count of characters
:: Output
::	TSTR %RETURN%	The output string
:lstrcpyn
set	lstrcpyn_Text=%*
set	lstrcpyn_Count=%RETURN%
set	RETURN=
:lstrcpyn_loop
if	defined lstrcpyn_Text	(
	if	/i %lstrcpyn_Count% EQU 0	(
		goto	return
		)
	set	"RETURN=%RETURN%%lstrcpyn_Text:~0,1%"
	set	"lstrcpyn_Text=%lstrcpyn_Text:~1%"
	set	/a lstrcpyn_Count-=1
	goto	lstrcpyn_loop
	)
	
goto	return
::==============================================================================
:: DebugPrint
:: 	Print something when DEBUG is defined
:: Input
::	%1	The quotated string
:: Output
::	None
:DebugPrint
%IFDEF_DEBUG%
	:: String functions are SLOW!
	:: Move ConvertQSTRToSTR out from echo's make them look faster.
	call	:ConvertQSTRToSTR %1
	echo	*** DEBUG_PRINT_BEGIN ***
	echo	%RETURN%
	echo	***  DEBUG_PRINT_END  ***
	pause
%ENDIF%
goto	return
:return
:: Save return value
(
	endlocal
	set RETURN=%RETURN%
)
goto	eof
:eof